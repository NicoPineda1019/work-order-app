{
  "/mnt/c/Users/USUARIO/Documents/Dev/PruebaTécnica/work-order-app/work-order-backend/serverless.yml": {
    "versionFramework": "4.6.3",
    "servicePath": "/mnt/c/Users/USUARIO/Documents/Dev/PruebaTécnica/work-order-app/work-order-backend/serverless.yml",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "org": "nicolasenterprise",
      "app": "work-order",
      "service": "work-order-backend",
      "stages": {
        "default": {
          "params": {
            "tableName": "orders-table-dev",
            "snsTopic": "arn:aws:sns:us-east-1:605134431763:messages-order"
          }
        }
      },
      "plugins": [
        "serverless-wsgi",
        "serverless-python-requirements"
      ],
      "custom": {
        "wsgi": {
          "app": "app.app"
        }
      },
      "provider": {
        "name": "aws",
        "region": "us-east-1",
        "runtime": "python3.10",
        "iam": {
          "role": {
            "statements": [
              {
                "Effect": "Allow",
                "Action": [
                  "dynamodb:Query",
                  "dynamodb:Scan",
                  "dynamodb:GetItem",
                  "dynamodb:PutItem",
                  "dynamodb:UpdateItem",
                  "dynamodb:DeleteItem"
                ],
                "Resource": [
                  {
                    "Fn::GetAtt": [
                      "UsersTable",
                      "Arn"
                    ]
                  }
                ]
              },
              {
                "Effect": "Allow",
                "Action": [
                  "sns:Publish"
                ],
                "Resource": [
                  {
                    "Ref": "SNSTopicARN"
                  }
                ]
              }
            ]
          }
        },
        "environment": {
          "USERS_TABLE": "orders-table-dev",
          "SNS_TOPIC": "arn:aws:sns:us-east-1:605134431763:messages-order"
        },
        "stage": "dev",
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "RequestDashlambdaLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/work-order-backend-dev-request-lambda"
              }
            },
            "ProccessingDashordersDashlambdaLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/work-order-backend-dev-proccessing-orders-lambda"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "work-order-backend",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/work-order-backend-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/work-order-backend-dev*:*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "dynamodb:Query",
                            "dynamodb:Scan",
                            "dynamodb:GetItem",
                            "dynamodb:PutItem",
                            "dynamodb:UpdateItem",
                            "dynamodb:DeleteItem"
                          ],
                          "Resource": [
                            {
                              "Fn::GetAtt": [
                                "UsersTable",
                                "Arn"
                              ]
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "sns:Publish"
                          ],
                          "Resource": [
                            {
                              "Ref": "SNSTopicARN"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "sqs:ReceiveMessage",
                            "sqs:DeleteMessage",
                            "sqs:GetQueueAttributes"
                          ],
                          "Resource": [
                            {
                              "Fn::GetAtt": [
                                "ProcessedOrder",
                                "Arn"
                              ]
                            },
                            {
                              "Fn::GetAtt": [
                                "ReceivedOrder",
                                "Arn"
                              ]
                            },
                            {
                              "Fn::GetAtt": [
                                "CompletedOrder",
                                "Arn"
                              ]
                            },
                            {
                              "Fn::GetAtt": [
                                "CanceledOrder",
                                "Arn"
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "work-order-backend",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "RequestDashlambdaLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-ef14dd6c-d74f",
                  "S3Key": "serverless/work-order-backend/dev/1739839043205-2025-02-18T00:37:23.205Z/work-order-backend.zip"
                },
                "Handler": "app.handler",
                "Runtime": "python3.10",
                "FunctionName": "work-order-backend-dev-request-lambda",
                "MemorySize": 1024,
                "Timeout": 35,
                "Description": "Lambda que recibe las ordenes de trabajo",
                "Environment": {
                  "Variables": {
                    "USERS_TABLE": "orders-table-dev",
                    "SNS_TOPIC": "arn:aws:sns:us-east-1:605134431763:messages-order"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "RequestDashlambdaLogGroup"
              ]
            },
            "ProccessingDashordersDashlambdaLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-ef14dd6c-d74f",
                  "S3Key": "serverless/work-order-backend/dev/1739839043205-2025-02-18T00:37:23.205Z/work-order-backend.zip"
                },
                "Handler": "processing-lam.handler",
                "Runtime": "python3.10",
                "FunctionName": "work-order-backend-dev-proccessing-orders-lambda",
                "MemorySize": 1024,
                "Timeout": 10,
                "Description": "Lambda que procesa las ordenes de trabajo que se encuentran en cola",
                "Environment": {
                  "Variables": {
                    "USERS_TABLE": "orders-table-dev",
                    "SNS_TOPIC": "arn:aws:sns:us-east-1:605134431763:messages-order"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ProccessingDashordersDashlambdaLogGroup"
              ]
            },
            "RequestDashlambdaLambdaVersionykIbI5CKg9RCkDlOnKCmOloARnakwC4nJyUPUSbrUeA": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "RequestDashlambdaLambdaFunction"
                },
                "CodeSha256": "yZAab4sghrYdBjCLsNro6AM0Kr8tZ/ZeGZmvYsz/A9s=",
                "Description": "Lambda que recibe las ordenes de trabajo"
              }
            },
            "ProccessingDashordersDashlambdaLambdaVersionZLCW9PIIIOCkFhesESHHEevyYMZYVDcSy6XkijARFRs": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ProccessingDashordersDashlambdaLambdaFunction"
                },
                "CodeSha256": "yZAab4sghrYdBjCLsNro6AM0Kr8tZ/ZeGZmvYsz/A9s=",
                "Description": "Lambda que procesa las ordenes de trabajo que se encuentran en cola"
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "dev-work-order-backend",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourceProxyVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "{proxy+}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodAny": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "ANY",
                "RequestParameters": {},
                "ResourceId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "RequestDashlambdaLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "RequestDashlambdaLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodProxyVarAny": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "ANY",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceProxyVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "RequestDashlambdaLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "RequestDashlambdaLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayDeployment1739839029652": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "dev"
              },
              "DependsOn": [
                "ApiGatewayMethodAny",
                "ApiGatewayMethodProxyVarAny"
              ]
            },
            "RequestDashlambdaLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "RequestDashlambdaLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "ProccessingDashordersDashlambdaEventSourceMappingSQSProcessedOrder": {
              "Type": "AWS::Lambda::EventSourceMapping",
              "DependsOn": [
                "IamRoleLambdaExecution"
              ],
              "Properties": {
                "BatchSize": 10,
                "MaximumBatchingWindowInSeconds": 60,
                "EventSourceArn": {
                  "Fn::GetAtt": [
                    "ProcessedOrder",
                    "Arn"
                  ]
                },
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ProccessingDashordersDashlambdaLambdaFunction",
                    "Arn"
                  ]
                },
                "Enabled": true
              }
            },
            "ProccessingDashordersDashlambdaEventSourceMappingSQSReceivedOrder": {
              "Type": "AWS::Lambda::EventSourceMapping",
              "DependsOn": [
                "IamRoleLambdaExecution"
              ],
              "Properties": {
                "BatchSize": 10,
                "MaximumBatchingWindowInSeconds": 60,
                "EventSourceArn": {
                  "Fn::GetAtt": [
                    "ReceivedOrder",
                    "Arn"
                  ]
                },
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ProccessingDashordersDashlambdaLambdaFunction",
                    "Arn"
                  ]
                },
                "Enabled": true
              }
            },
            "ProccessingDashordersDashlambdaEventSourceMappingSQSCompletedOrder": {
              "Type": "AWS::Lambda::EventSourceMapping",
              "DependsOn": [
                "IamRoleLambdaExecution"
              ],
              "Properties": {
                "BatchSize": 10,
                "MaximumBatchingWindowInSeconds": 60,
                "EventSourceArn": {
                  "Fn::GetAtt": [
                    "CompletedOrder",
                    "Arn"
                  ]
                },
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ProccessingDashordersDashlambdaLambdaFunction",
                    "Arn"
                  ]
                },
                "Enabled": true
              }
            },
            "ProccessingDashordersDashlambdaEventSourceMappingSQSCanceledOrder": {
              "Type": "AWS::Lambda::EventSourceMapping",
              "DependsOn": [
                "IamRoleLambdaExecution"
              ],
              "Properties": {
                "BatchSize": 10,
                "MaximumBatchingWindowInSeconds": 60,
                "EventSourceArn": {
                  "Fn::GetAtt": [
                    "CanceledOrder",
                    "Arn"
                  ]
                },
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ProccessingDashordersDashlambdaLambdaFunction",
                    "Arn"
                  ]
                },
                "Enabled": true
              }
            },
            "UsersTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "AttributeDefinitions": [
                  {
                    "AttributeName": "id",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "id",
                    "KeyType": "HASH"
                  }
                ],
                "ProvisionedThroughput": {
                  "ReadCapacityUnits": 1,
                  "WriteCapacityUnits": 1
                },
                "TableName": "orders-table-dev"
              }
            },
            "ProcessedOrder": {
              "Type": "AWS::SQS::Queue",
              "Properties": {
                "QueueName": "processed-order-queue"
              }
            },
            "ReceivedOrder": {
              "Type": "AWS::SQS::Queue",
              "Properties": {
                "QueueName": "received-order-queue"
              }
            },
            "CompletedOrder": {
              "Type": "AWS::SQS::Queue",
              "Properties": {
                "QueueName": "completed-order-queue"
              }
            },
            "CanceledOrder": {
              "Type": "AWS::SQS::Queue",
              "Properties": {
                "QueueName": "canceled-order-queue"
              }
            },
            "SqsQueueProcessedPolicy": {
              "Type": "AWS::SQS::QueuePolicy",
              "Properties": {
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Id": "MyQueuePolicy",
                  "Statement": [
                    {
                      "Sid": "Allow-SNS-SendMessage",
                      "Effect": "Allow",
                      "Principal": "*",
                      "Action": [
                        "sqs:SendMessage"
                      ],
                      "Resource": {
                        "Fn::GetAtt": [
                          "ProcessedOrder",
                          "Arn"
                        ]
                      },
                      "Condition": {
                        "ArnEquals": {
                          "aws:SourceArn": {
                            "Ref": "SNSTopicARN"
                          }
                        }
                      }
                    }
                  ]
                },
                "Queues": [
                  {
                    "Ref": "ProcessedOrder"
                  }
                ]
              }
            },
            "SqsQueueReceivedPolicy": {
              "Type": "AWS::SQS::QueuePolicy",
              "Properties": {
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Id": "MyQueuePolicy",
                  "Statement": [
                    {
                      "Sid": "Allow-SNS-SendMessage",
                      "Effect": "Allow",
                      "Principal": "*",
                      "Action": [
                        "sqs:SendMessage"
                      ],
                      "Resource": {
                        "Fn::GetAtt": [
                          "ReceivedOrder",
                          "Arn"
                        ]
                      },
                      "Condition": {
                        "ArnEquals": {
                          "aws:SourceArn": {
                            "Ref": "SNSTopicARN"
                          }
                        }
                      }
                    }
                  ]
                },
                "Queues": [
                  {
                    "Ref": "ReceivedOrder"
                  }
                ]
              }
            },
            "SqsQueueCompletedPolicy": {
              "Type": "AWS::SQS::QueuePolicy",
              "Properties": {
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Id": "MyQueuePolicy",
                  "Statement": [
                    {
                      "Sid": "Allow-SNS-SendMessage",
                      "Effect": "Allow",
                      "Principal": "*",
                      "Action": [
                        "sqs:SendMessage"
                      ],
                      "Resource": {
                        "Fn::GetAtt": [
                          "CompletedOrder",
                          "Arn"
                        ]
                      },
                      "Condition": {
                        "ArnEquals": {
                          "aws:SourceArn": {
                            "Ref": "SNSTopicARN"
                          }
                        }
                      }
                    }
                  ]
                },
                "Queues": [
                  {
                    "Ref": "CompletedOrder"
                  }
                ]
              }
            },
            "SqsQueueCanceledPolicy": {
              "Type": "AWS::SQS::QueuePolicy",
              "Properties": {
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Id": "MyQueuePolicy",
                  "Statement": [
                    {
                      "Sid": "Allow-SNS-SendMessage",
                      "Effect": "Allow",
                      "Principal": "*",
                      "Action": [
                        "sqs:SendMessage"
                      ],
                      "Resource": {
                        "Fn::GetAtt": [
                          "CanceledOrder",
                          "Arn"
                        ]
                      },
                      "Condition": {
                        "ArnEquals": {
                          "aws:SourceArn": {
                            "Ref": "SNSTopicARN"
                          }
                        }
                      }
                    }
                  ]
                },
                "Queues": [
                  {
                    "Ref": "CanceledOrder"
                  }
                ]
              }
            },
            "MessagesOrder": {
              "Type": "AWS::SNS::Topic",
              "Properties": {
                "TopicName": "messages-order"
              }
            },
            "SnsSubscriptionProcessed": {
              "Type": "AWS::SNS::Subscription",
              "Properties": {
                "Protocol": "sqs",
                "Endpoint": {
                  "Fn::GetAtt": [
                    "ProcessedOrder",
                    "Arn"
                  ]
                },
                "Region": {
                  "Ref": "TopicRegion"
                },
                "TopicArn": {
                  "Fn::GetAtt": [
                    "MessagesOrder",
                    "Arn"
                  ]
                },
                "FilterPolicyScope": "MessageAttributes",
                "FilterPolicy": {
                  "estado": [
                    "EN_PROCESO"
                  ]
                }
              },
              "DependsOn": [
                "MessagesOrder"
              ]
            },
            "SnsSubscriptionReceived": {
              "Type": "AWS::SNS::Subscription",
              "Properties": {
                "Protocol": "sqs",
                "Endpoint": {
                  "Fn::GetAtt": [
                    "ReceivedOrder",
                    "Arn"
                  ]
                },
                "Region": {
                  "Ref": "TopicRegion"
                },
                "TopicArn": {
                  "Ref": "SNSTopicARN"
                },
                "FilterPolicyScope": "MessageAttributes",
                "FilterPolicy": {
                  "estado": [
                    "RECIBIDA"
                  ]
                }
              }
            },
            "SnsSubscriptionCompleted": {
              "Type": "AWS::SNS::Subscription",
              "Properties": {
                "Protocol": "sqs",
                "Endpoint": {
                  "Fn::GetAtt": [
                    "CompletedOrder",
                    "Arn"
                  ]
                },
                "Region": {
                  "Ref": "TopicRegion"
                },
                "TopicArn": {
                  "Ref": "SNSTopicARN"
                },
                "FilterPolicyScope": "MessageAttributes",
                "FilterPolicy": {
                  "estado": [
                    "COMPLETADA"
                  ]
                }
              }
            },
            "SnsSubscriptionCanceled": {
              "Type": "AWS::SNS::Subscription",
              "Properties": {
                "Protocol": "sqs",
                "Endpoint": {
                  "Fn::GetAtt": [
                    "CanceledOrder",
                    "Arn"
                  ]
                },
                "Region": {
                  "Ref": "TopicRegion"
                },
                "TopicArn": {
                  "Ref": "SNSTopicARN"
                },
                "FilterPolicyScope": "MessageAttributes",
                "FilterPolicy": {
                  "estado": [
                    "CANCELADA"
                  ]
                }
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-us-east-1-ef14dd6c-d74f",
              "Export": {
                "Name": "sls-work-order-backend-dev-ServerlessDeploymentBucketName"
              }
            },
            "RequestDashlambdaLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "RequestDashlambdaLambdaVersionykIbI5CKg9RCkDlOnKCmOloARnakwC4nJyUPUSbrUeA"
              },
              "Export": {
                "Name": "sls-work-order-backend-dev-RequestDashlambdaLambdaFunctionQualifiedArn"
              }
            },
            "ProccessingDashordersDashlambdaLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ProccessingDashordersDashlambdaLambdaVersionZLCW9PIIIOCkFhesESHHEevyYMZYVDcSy6XkijARFRs"
              },
              "Export": {
                "Name": "sls-work-order-backend-dev-ProccessingDashordersDashlambdaLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-work-order-backend-dev-ServiceEndpoint"
              }
            }
          },
          "Parameters": {
            "SNSTopicARN": {
              "Type": "String",
              "Default": "arn:aws:sns:us-east-1:605134431763:messages-order"
            },
            "TopicRegion": {
              "Type": "String",
              "Default": "us-east-1"
            }
          }
        },
        "vpc": {}
      },
      "functions": {
        "request-lambda": {
          "handler": "app.handler",
          "description": "Lambda que recibe las ordenes de trabajo",
          "timeout": 35,
          "events": [
            {
              "http": {
                "path": "",
                "method": "any",
                "integration": "AWS_PROXY"
              }
            },
            {
              "http": {
                "path": "{proxy+}",
                "method": "any",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "work-order-backend-dev-request-lambda",
          "package": {},
          "memory": 1024,
          "runtime": "python3.10",
          "vpc": {},
          "versionLogicalId": "RequestDashlambdaLambdaVersionykIbI5CKg9RCkDlOnKCmOloARnakwC4nJyUPUSbrUeA"
        },
        "proccessing-orders-lambda": {
          "handler": "processing-lam.handler",
          "description": "Lambda que procesa las ordenes de trabajo que se encuentran en cola",
          "timeout": 10,
          "events": [
            {
              "sqs": {
                "arn": {
                  "Fn::GetAtt": [
                    "ProcessedOrder",
                    "Arn"
                  ]
                },
                "batchSize": 10,
                "maximumBatchingWindow": 60
              }
            },
            {
              "sqs": {
                "arn": {
                  "Fn::GetAtt": [
                    "ReceivedOrder",
                    "Arn"
                  ]
                },
                "batchSize": 10,
                "maximumBatchingWindow": 60
              }
            },
            {
              "sqs": {
                "arn": {
                  "Fn::GetAtt": [
                    "CompletedOrder",
                    "Arn"
                  ]
                },
                "batchSize": 10,
                "maximumBatchingWindow": 60
              }
            },
            {
              "sqs": {
                "arn": {
                  "Fn::GetAtt": [
                    "CanceledOrder",
                    "Arn"
                  ]
                },
                "batchSize": 10,
                "maximumBatchingWindow": 60
              }
            }
          ],
          "name": "work-order-backend-dev-proccessing-orders-lambda",
          "package": {},
          "memory": 1024,
          "runtime": "python3.10",
          "vpc": {},
          "versionLogicalId": "ProccessingDashordersDashlambdaLambdaVersionZLCW9PIIIOCkFhesESHHEevyYMZYVDcSy6XkijARFRs"
        }
      },
      "resources": {
        "Parameters": {
          "SNSTopicARN": {
            "Type": "String",
            "Default": "arn:aws:sns:us-east-1:605134431763:messages-order"
          },
          "TopicRegion": {
            "Type": "String",
            "Default": "us-east-1"
          }
        },
        "Resources": {
          "UsersTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "TableName": "orders-table-dev"
            }
          },
          "ProcessedOrder": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "processed-order-queue"
            }
          },
          "ReceivedOrder": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "received-order-queue"
            }
          },
          "CompletedOrder": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "completed-order-queue"
            }
          },
          "CanceledOrder": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "canceled-order-queue"
            }
          },
          "SqsQueueProcessedPolicy": {
            "Type": "AWS::SQS::QueuePolicy",
            "Properties": {
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Id": "MyQueuePolicy",
                "Statement": [
                  {
                    "Sid": "Allow-SNS-SendMessage",
                    "Effect": "Allow",
                    "Principal": "*",
                    "Action": [
                      "sqs:SendMessage"
                    ],
                    "Resource": {
                      "Fn::GetAtt": [
                        "ProcessedOrder",
                        "Arn"
                      ]
                    },
                    "Condition": {
                      "ArnEquals": {
                        "aws:SourceArn": {
                          "Ref": "SNSTopicARN"
                        }
                      }
                    }
                  }
                ]
              },
              "Queues": [
                {
                  "Ref": "ProcessedOrder"
                }
              ]
            }
          },
          "SqsQueueReceivedPolicy": {
            "Type": "AWS::SQS::QueuePolicy",
            "Properties": {
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Id": "MyQueuePolicy",
                "Statement": [
                  {
                    "Sid": "Allow-SNS-SendMessage",
                    "Effect": "Allow",
                    "Principal": "*",
                    "Action": [
                      "sqs:SendMessage"
                    ],
                    "Resource": {
                      "Fn::GetAtt": [
                        "ReceivedOrder",
                        "Arn"
                      ]
                    },
                    "Condition": {
                      "ArnEquals": {
                        "aws:SourceArn": {
                          "Ref": "SNSTopicARN"
                        }
                      }
                    }
                  }
                ]
              },
              "Queues": [
                {
                  "Ref": "ReceivedOrder"
                }
              ]
            }
          },
          "SqsQueueCompletedPolicy": {
            "Type": "AWS::SQS::QueuePolicy",
            "Properties": {
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Id": "MyQueuePolicy",
                "Statement": [
                  {
                    "Sid": "Allow-SNS-SendMessage",
                    "Effect": "Allow",
                    "Principal": "*",
                    "Action": [
                      "sqs:SendMessage"
                    ],
                    "Resource": {
                      "Fn::GetAtt": [
                        "CompletedOrder",
                        "Arn"
                      ]
                    },
                    "Condition": {
                      "ArnEquals": {
                        "aws:SourceArn": {
                          "Ref": "SNSTopicARN"
                        }
                      }
                    }
                  }
                ]
              },
              "Queues": [
                {
                  "Ref": "CompletedOrder"
                }
              ]
            }
          },
          "SqsQueueCanceledPolicy": {
            "Type": "AWS::SQS::QueuePolicy",
            "Properties": {
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Id": "MyQueuePolicy",
                "Statement": [
                  {
                    "Sid": "Allow-SNS-SendMessage",
                    "Effect": "Allow",
                    "Principal": "*",
                    "Action": [
                      "sqs:SendMessage"
                    ],
                    "Resource": {
                      "Fn::GetAtt": [
                        "CanceledOrder",
                        "Arn"
                      ]
                    },
                    "Condition": {
                      "ArnEquals": {
                        "aws:SourceArn": {
                          "Ref": "SNSTopicARN"
                        }
                      }
                    }
                  }
                ]
              },
              "Queues": [
                {
                  "Ref": "CanceledOrder"
                }
              ]
            }
          },
          "MessagesOrder": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
              "TopicName": "messages-order"
            }
          },
          "SnsSubscriptionProcessed": {
            "Type": "AWS::SNS::Subscription",
            "Properties": {
              "Protocol": "sqs",
              "Endpoint": {
                "Fn::GetAtt": [
                  "ProcessedOrder",
                  "Arn"
                ]
              },
              "Region": {
                "Ref": "TopicRegion"
              },
              "TopicArn": {
                "Fn::GetAtt": [
                  "MessagesOrder",
                  "Arn"
                ]
              },
              "FilterPolicyScope": "MessageAttributes",
              "FilterPolicy": {
                "estado": [
                  "EN_PROCESO"
                ]
              }
            },
            "DependsOn": [
              "MessagesOrder"
            ]
          },
          "SnsSubscriptionReceived": {
            "Type": "AWS::SNS::Subscription",
            "Properties": {
              "Protocol": "sqs",
              "Endpoint": {
                "Fn::GetAtt": [
                  "ReceivedOrder",
                  "Arn"
                ]
              },
              "Region": {
                "Ref": "TopicRegion"
              },
              "TopicArn": {
                "Ref": "SNSTopicARN"
              },
              "FilterPolicyScope": "MessageAttributes",
              "FilterPolicy": {
                "estado": [
                  "RECIBIDA"
                ]
              }
            }
          },
          "SnsSubscriptionCompleted": {
            "Type": "AWS::SNS::Subscription",
            "Properties": {
              "Protocol": "sqs",
              "Endpoint": {
                "Fn::GetAtt": [
                  "CompletedOrder",
                  "Arn"
                ]
              },
              "Region": {
                "Ref": "TopicRegion"
              },
              "TopicArn": {
                "Ref": "SNSTopicARN"
              },
              "FilterPolicyScope": "MessageAttributes",
              "FilterPolicy": {
                "estado": [
                  "COMPLETADA"
                ]
              }
            }
          },
          "SnsSubscriptionCanceled": {
            "Type": "AWS::SNS::Subscription",
            "Properties": {
              "Protocol": "sqs",
              "Endpoint": {
                "Fn::GetAtt": [
                  "CanceledOrder",
                  "Arn"
                ]
              },
              "Region": {
                "Ref": "TopicRegion"
              },
              "TopicArn": {
                "Ref": "SNSTopicARN"
              },
              "FilterPolicyScope": "MessageAttributes",
              "FilterPolicy": {
                "estado": [
                  "CANCELADA"
                ]
              }
            }
          }
        },
        "Outputs": {}
      }
    },
    "provider": {
      "name": "aws",
      "region": "us-east-1",
      "runtime": "python3.10",
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:Query",
                "dynamodb:Scan",
                "dynamodb:GetItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "UsersTable",
                    "Arn"
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "sns:Publish"
              ],
              "Resource": [
                {
                  "Ref": "SNSTopicARN"
                }
              ]
            }
          ]
        }
      },
      "environment": {
        "USERS_TABLE": "orders-table-dev",
        "SNS_TOPIC": "arn:aws:sns:us-east-1:605134431763:messages-order"
      },
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "RequestDashlambdaLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/work-order-backend-dev-request-lambda"
            }
          },
          "ProccessingDashordersDashlambdaLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/work-order-backend-dev-proccessing-orders-lambda"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "work-order-backend",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/work-order-backend-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/work-order-backend-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:Query",
                          "dynamodb:Scan",
                          "dynamodb:GetItem",
                          "dynamodb:PutItem",
                          "dynamodb:UpdateItem",
                          "dynamodb:DeleteItem"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "UsersTable",
                              "Arn"
                            ]
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "sns:Publish"
                        ],
                        "Resource": [
                          {
                            "Ref": "SNSTopicARN"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "sqs:ReceiveMessage",
                          "sqs:DeleteMessage",
                          "sqs:GetQueueAttributes"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "ProcessedOrder",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "ReceivedOrder",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "CompletedOrder",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "CanceledOrder",
                              "Arn"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "work-order-backend",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "RequestDashlambdaLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-ef14dd6c-d74f",
                "S3Key": "serverless/work-order-backend/dev/1739839043205-2025-02-18T00:37:23.205Z/work-order-backend.zip"
              },
              "Handler": "app.handler",
              "Runtime": "python3.10",
              "FunctionName": "work-order-backend-dev-request-lambda",
              "MemorySize": 1024,
              "Timeout": 35,
              "Description": "Lambda que recibe las ordenes de trabajo",
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "orders-table-dev",
                  "SNS_TOPIC": "arn:aws:sns:us-east-1:605134431763:messages-order"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RequestDashlambdaLogGroup"
            ]
          },
          "ProccessingDashordersDashlambdaLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-ef14dd6c-d74f",
                "S3Key": "serverless/work-order-backend/dev/1739839043205-2025-02-18T00:37:23.205Z/work-order-backend.zip"
              },
              "Handler": "processing-lam.handler",
              "Runtime": "python3.10",
              "FunctionName": "work-order-backend-dev-proccessing-orders-lambda",
              "MemorySize": 1024,
              "Timeout": 10,
              "Description": "Lambda que procesa las ordenes de trabajo que se encuentran en cola",
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "orders-table-dev",
                  "SNS_TOPIC": "arn:aws:sns:us-east-1:605134431763:messages-order"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ProccessingDashordersDashlambdaLogGroup"
            ]
          },
          "RequestDashlambdaLambdaVersionykIbI5CKg9RCkDlOnKCmOloARnakwC4nJyUPUSbrUeA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RequestDashlambdaLambdaFunction"
              },
              "CodeSha256": "yZAab4sghrYdBjCLsNro6AM0Kr8tZ/ZeGZmvYsz/A9s=",
              "Description": "Lambda que recibe las ordenes de trabajo"
            }
          },
          "ProccessingDashordersDashlambdaLambdaVersionZLCW9PIIIOCkFhesESHHEevyYMZYVDcSy6XkijARFRs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ProccessingDashordersDashlambdaLambdaFunction"
              },
              "CodeSha256": "yZAab4sghrYdBjCLsNro6AM0Kr8tZ/ZeGZmvYsz/A9s=",
              "Description": "Lambda que procesa las ordenes de trabajo que se encuentran en cola"
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-work-order-backend",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceProxyVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "{proxy+}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAny": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "ANY",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "RequestDashlambdaLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "RequestDashlambdaLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodProxyVarAny": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "ANY",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceProxyVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "RequestDashlambdaLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "RequestDashlambdaLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1739839029652": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodAny",
              "ApiGatewayMethodProxyVarAny"
            ]
          },
          "RequestDashlambdaLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RequestDashlambdaLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ProccessingDashordersDashlambdaEventSourceMappingSQSProcessedOrder": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "DependsOn": [
              "IamRoleLambdaExecution"
            ],
            "Properties": {
              "BatchSize": 10,
              "MaximumBatchingWindowInSeconds": 60,
              "EventSourceArn": {
                "Fn::GetAtt": [
                  "ProcessedOrder",
                  "Arn"
                ]
              },
              "FunctionName": {
                "Fn::GetAtt": [
                  "ProccessingDashordersDashlambdaLambdaFunction",
                  "Arn"
                ]
              },
              "Enabled": true
            }
          },
          "ProccessingDashordersDashlambdaEventSourceMappingSQSReceivedOrder": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "DependsOn": [
              "IamRoleLambdaExecution"
            ],
            "Properties": {
              "BatchSize": 10,
              "MaximumBatchingWindowInSeconds": 60,
              "EventSourceArn": {
                "Fn::GetAtt": [
                  "ReceivedOrder",
                  "Arn"
                ]
              },
              "FunctionName": {
                "Fn::GetAtt": [
                  "ProccessingDashordersDashlambdaLambdaFunction",
                  "Arn"
                ]
              },
              "Enabled": true
            }
          },
          "ProccessingDashordersDashlambdaEventSourceMappingSQSCompletedOrder": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "DependsOn": [
              "IamRoleLambdaExecution"
            ],
            "Properties": {
              "BatchSize": 10,
              "MaximumBatchingWindowInSeconds": 60,
              "EventSourceArn": {
                "Fn::GetAtt": [
                  "CompletedOrder",
                  "Arn"
                ]
              },
              "FunctionName": {
                "Fn::GetAtt": [
                  "ProccessingDashordersDashlambdaLambdaFunction",
                  "Arn"
                ]
              },
              "Enabled": true
            }
          },
          "ProccessingDashordersDashlambdaEventSourceMappingSQSCanceledOrder": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "DependsOn": [
              "IamRoleLambdaExecution"
            ],
            "Properties": {
              "BatchSize": 10,
              "MaximumBatchingWindowInSeconds": 60,
              "EventSourceArn": {
                "Fn::GetAtt": [
                  "CanceledOrder",
                  "Arn"
                ]
              },
              "FunctionName": {
                "Fn::GetAtt": [
                  "ProccessingDashordersDashlambdaLambdaFunction",
                  "Arn"
                ]
              },
              "Enabled": true
            }
          },
          "UsersTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "TableName": "orders-table-dev"
            }
          },
          "ProcessedOrder": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "processed-order-queue"
            }
          },
          "ReceivedOrder": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "received-order-queue"
            }
          },
          "CompletedOrder": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "completed-order-queue"
            }
          },
          "CanceledOrder": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "canceled-order-queue"
            }
          },
          "SqsQueueProcessedPolicy": {
            "Type": "AWS::SQS::QueuePolicy",
            "Properties": {
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Id": "MyQueuePolicy",
                "Statement": [
                  {
                    "Sid": "Allow-SNS-SendMessage",
                    "Effect": "Allow",
                    "Principal": "*",
                    "Action": [
                      "sqs:SendMessage"
                    ],
                    "Resource": {
                      "Fn::GetAtt": [
                        "ProcessedOrder",
                        "Arn"
                      ]
                    },
                    "Condition": {
                      "ArnEquals": {
                        "aws:SourceArn": {
                          "Ref": "SNSTopicARN"
                        }
                      }
                    }
                  }
                ]
              },
              "Queues": [
                {
                  "Ref": "ProcessedOrder"
                }
              ]
            }
          },
          "SqsQueueReceivedPolicy": {
            "Type": "AWS::SQS::QueuePolicy",
            "Properties": {
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Id": "MyQueuePolicy",
                "Statement": [
                  {
                    "Sid": "Allow-SNS-SendMessage",
                    "Effect": "Allow",
                    "Principal": "*",
                    "Action": [
                      "sqs:SendMessage"
                    ],
                    "Resource": {
                      "Fn::GetAtt": [
                        "ReceivedOrder",
                        "Arn"
                      ]
                    },
                    "Condition": {
                      "ArnEquals": {
                        "aws:SourceArn": {
                          "Ref": "SNSTopicARN"
                        }
                      }
                    }
                  }
                ]
              },
              "Queues": [
                {
                  "Ref": "ReceivedOrder"
                }
              ]
            }
          },
          "SqsQueueCompletedPolicy": {
            "Type": "AWS::SQS::QueuePolicy",
            "Properties": {
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Id": "MyQueuePolicy",
                "Statement": [
                  {
                    "Sid": "Allow-SNS-SendMessage",
                    "Effect": "Allow",
                    "Principal": "*",
                    "Action": [
                      "sqs:SendMessage"
                    ],
                    "Resource": {
                      "Fn::GetAtt": [
                        "CompletedOrder",
                        "Arn"
                      ]
                    },
                    "Condition": {
                      "ArnEquals": {
                        "aws:SourceArn": {
                          "Ref": "SNSTopicARN"
                        }
                      }
                    }
                  }
                ]
              },
              "Queues": [
                {
                  "Ref": "CompletedOrder"
                }
              ]
            }
          },
          "SqsQueueCanceledPolicy": {
            "Type": "AWS::SQS::QueuePolicy",
            "Properties": {
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Id": "MyQueuePolicy",
                "Statement": [
                  {
                    "Sid": "Allow-SNS-SendMessage",
                    "Effect": "Allow",
                    "Principal": "*",
                    "Action": [
                      "sqs:SendMessage"
                    ],
                    "Resource": {
                      "Fn::GetAtt": [
                        "CanceledOrder",
                        "Arn"
                      ]
                    },
                    "Condition": {
                      "ArnEquals": {
                        "aws:SourceArn": {
                          "Ref": "SNSTopicARN"
                        }
                      }
                    }
                  }
                ]
              },
              "Queues": [
                {
                  "Ref": "CanceledOrder"
                }
              ]
            }
          },
          "MessagesOrder": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
              "TopicName": "messages-order"
            }
          },
          "SnsSubscriptionProcessed": {
            "Type": "AWS::SNS::Subscription",
            "Properties": {
              "Protocol": "sqs",
              "Endpoint": {
                "Fn::GetAtt": [
                  "ProcessedOrder",
                  "Arn"
                ]
              },
              "Region": {
                "Ref": "TopicRegion"
              },
              "TopicArn": {
                "Fn::GetAtt": [
                  "MessagesOrder",
                  "Arn"
                ]
              },
              "FilterPolicyScope": "MessageAttributes",
              "FilterPolicy": {
                "estado": [
                  "EN_PROCESO"
                ]
              }
            },
            "DependsOn": [
              "MessagesOrder"
            ]
          },
          "SnsSubscriptionReceived": {
            "Type": "AWS::SNS::Subscription",
            "Properties": {
              "Protocol": "sqs",
              "Endpoint": {
                "Fn::GetAtt": [
                  "ReceivedOrder",
                  "Arn"
                ]
              },
              "Region": {
                "Ref": "TopicRegion"
              },
              "TopicArn": {
                "Ref": "SNSTopicARN"
              },
              "FilterPolicyScope": "MessageAttributes",
              "FilterPolicy": {
                "estado": [
                  "RECIBIDA"
                ]
              }
            }
          },
          "SnsSubscriptionCompleted": {
            "Type": "AWS::SNS::Subscription",
            "Properties": {
              "Protocol": "sqs",
              "Endpoint": {
                "Fn::GetAtt": [
                  "CompletedOrder",
                  "Arn"
                ]
              },
              "Region": {
                "Ref": "TopicRegion"
              },
              "TopicArn": {
                "Ref": "SNSTopicARN"
              },
              "FilterPolicyScope": "MessageAttributes",
              "FilterPolicy": {
                "estado": [
                  "COMPLETADA"
                ]
              }
            }
          },
          "SnsSubscriptionCanceled": {
            "Type": "AWS::SNS::Subscription",
            "Properties": {
              "Protocol": "sqs",
              "Endpoint": {
                "Fn::GetAtt": [
                  "CanceledOrder",
                  "Arn"
                ]
              },
              "Region": {
                "Ref": "TopicRegion"
              },
              "TopicArn": {
                "Ref": "SNSTopicARN"
              },
              "FilterPolicyScope": "MessageAttributes",
              "FilterPolicy": {
                "estado": [
                  "CANCELADA"
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-us-east-1-ef14dd6c-d74f",
            "Export": {
              "Name": "sls-work-order-backend-dev-ServerlessDeploymentBucketName"
            }
          },
          "RequestDashlambdaLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RequestDashlambdaLambdaVersionykIbI5CKg9RCkDlOnKCmOloARnakwC4nJyUPUSbrUeA"
            },
            "Export": {
              "Name": "sls-work-order-backend-dev-RequestDashlambdaLambdaFunctionQualifiedArn"
            }
          },
          "ProccessingDashordersDashlambdaLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ProccessingDashordersDashlambdaLambdaVersionZLCW9PIIIOCkFhesESHHEevyYMZYVDcSy6XkijARFRs"
            },
            "Export": {
              "Name": "sls-work-order-backend-dev-ProccessingDashordersDashlambdaLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-work-order-backend-dev-ServiceEndpoint"
            }
          }
        },
        "Parameters": {
          "SNSTopicARN": {
            "Type": "String",
            "Default": "arn:aws:sns:us-east-1:605134431763:messages-order"
          },
          "TopicRegion": {
            "Type": "String",
            "Default": "us-east-1"
          }
        }
      },
      "vpc": {}
    },
    "dashboard": {
      "isEnabledForService": true,
      "requiredAuthentication": false,
      "orgFeaturesInUse": {
        "providers": true,
        "monitoring": false
      },
      "orgObservabilityIntegrations": null,
      "serviceAppId": "SsFnZwwlLT3f06jCBP",
      "serviceProvider": {
        "accessKeyId": "<REDACTED>",
        "secretAccessKey": "<REDACTED>",
        "sessionToken": "<REDACTED>",
        "$source": {
          "CREDENTIALS_CODE": "<REDACTED>"
        }
      },
      "instanceParameters": null
    },
    "error": {
      "message": "An error occurred: SnsSubscriptionProcessed - Requested attribute Arn does not exist in schema for AWS::SNS::Topic.",
      "stack": "ServerlessError3: An error occurred: SnsSubscriptionProcessed - Requested attribute Arn does not exist in schema for AWS::SNS::Topic.\n    at file:///home/nicolas/.serverless/releases/4.6.3/package/dist/sf-core.js:1230:832\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async AwsDeploy.update (file:///home/nicolas/.serverless/releases/4.6.3/package/dist/sf-core.js:1230:25551)\n    at async aws:deploy:deploy:updateStack (file:///home/nicolas/.serverless/releases/4.6.3/package/dist/sf-core.js:1241:6089)\n    at async PluginManager.runHooks (file:///home/nicolas/.serverless/releases/4.6.3/package/dist/sf-core.js:1432:9562)\n    at async PluginManager.invoke (file:///home/nicolas/.serverless/releases/4.6.3/package/dist/sf-core.js:1432:10333)\n    at async PluginManager.spawn (file:///home/nicolas/.serverless/releases/4.6.3/package/dist/sf-core.js:1432:10696)\n    at async PluginManager.runHooks (file:///home/nicolas/.serverless/releases/4.6.3/package/dist/sf-core.js:1432:9562)\n    at async PluginManager.invoke (file:///home/nicolas/.serverless/releases/4.6.3/package/dist/sf-core.js:1432:10333)\n    at async PluginManager.run (file:///home/nicolas/.serverless/releases/4.6.3/package/dist/sf-core.js:1432:11068)\n    at async Serverless.run (file:///home/nicolas/.serverless/releases/4.6.3/package/dist/sf-core.js:1439:10575)\n    at async runFramework (file:///home/nicolas/.serverless/releases/4.6.3/package/dist/sf-core.js:1466:1776)\n    at async TraditionalRunner.run (file:///home/nicolas/.serverless/releases/4.6.3/package/dist/sf-core.js:1462:28364)\n    at async route (file:///home/nicolas/.serverless/releases/4.6.3/package/dist/sf-core.js:1508:2779)\n    at async Object.run (file:///home/nicolas/.serverless/releases/4.6.3/package/dist/sf-core.js:1509:3487)\n    at async run2 (file:///home/nicolas/.serverless/releases/4.6.3/package/dist/sf-core.js:1509:4640)",
      "code": "AWS_CLOUD_FORMATION_UPDATE_STACK_INTERNAL_S_N_S_SUBSCRIPTION_UPDATE_FAILED"
    },
    "serviceRawFile": "# \"org\" ensures this Service is used with the correct Serverless Framework Access Key.\norg: nicolasenterprise\n# \"app\" enables Serverless Framework Dashboard features and sharing them with other Services.\napp: work-order\n# \"service\" is the name of this project. This will also be added to your AWS resource names.\nservice: work-order-backend\n\nstages:\n  default:\n    params:\n      tableName: \"orders-table-${sls:stage}\"\n      snsTopic: \"arn:aws:sns:us-east-1:605134431763:messages-order\"\n\nplugins:\n  - serverless-wsgi\n  - serverless-python-requirements\n\ncustom:\n  wsgi:\n    app: app.app\n\nprovider:\n  name: aws\n  region: us-east-1\n  runtime: python3.10\n  iam:\n    role:\n      statements:\n        - Effect: Allow\n          Action:\n            - dynamodb:Query\n            - dynamodb:Scan\n            - dynamodb:GetItem\n            - dynamodb:PutItem\n            - dynamodb:UpdateItem\n            - dynamodb:DeleteItem\n          Resource:\n            - Fn::GetAtt: [UsersTable, Arn]\n        - Effect: Allow\n          Action:\n            - sns:Publish\n          Resource:\n            - !Ref SNSTopicARN\n\n  environment:\n    USERS_TABLE: ${param:tableName}\n    SNS_TOPIC: ${param:snsTopic}\n\nfunctions:\n  request-lambda:\n    handler: app.handler\n    description: Lambda que recibe las ordenes de trabajo\n    timeout: 35\n    events:\n      - http:\n          path: /\n          method: ANY\n      - http:\n          path: /{proxy+}\n          method: ANY\n  proccessing-orders-lambda:\n    handler: processing-lam.handler\n    description: Lambda que procesa las ordenes de trabajo que se encuentran en cola\n    timeout: 10\n    events:\n      - sqs:\n          arn:\n            Fn::GetAtt:\n              - ProcessedOrder\n              - Arn\n          batchSize: 10\n          maximumBatchingWindow: 60\n      - sqs:\n          arn:\n            Fn::GetAtt:\n              - ReceivedOrder\n              - Arn\n          batchSize: 10\n          maximumBatchingWindow: 60\n      - sqs:\n          arn:\n            Fn::GetAtt:\n              - CompletedOrder\n              - Arn\n          batchSize: 10\n          maximumBatchingWindow: 60\n\n      - sqs:\n          arn:\n            Fn::GetAtt:\n              - CanceledOrder\n              - Arn\n          batchSize: 10\n          maximumBatchingWindow: 60\n\n\nresources:\n  Parameters:\n    SNSTopicARN:\n      Type: String\n      Default: arn:aws:sns:us-east-1:605134431763:messages-order \n    TopicRegion:\n      Type: String\n      Default: us-east-1\n  Resources:\n    UsersTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${param:tableName}\n    ProcessedOrder:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: processed-order-queue\n    ReceivedOrder:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: received-order-queue\n    CompletedOrder:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: completed-order-queue\n    CanceledOrder:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: canceled-order-queue\n    SqsQueueProcessedPolicy:\n      Type: AWS::SQS::QueuePolicy\n      Properties:\n       PolicyDocument:\n        Version: '2012-10-17'\n        Id: MyQueuePolicy\n        Statement:\n        - Sid: Allow-SNS-SendMessage\n          Effect: Allow\n          Principal: \"*\"\n          Action:\n          - sqs:SendMessage\n          Resource: !GetAtt ProcessedOrder.Arn\n          Condition:\n           ArnEquals:\n            aws:SourceArn: !Ref SNSTopicARN\n       Queues:\n        - !Ref ProcessedOrder\n    SqsQueueReceivedPolicy:\n      Type: AWS::SQS::QueuePolicy\n      Properties:\n       PolicyDocument:\n        Version: '2012-10-17'\n        Id: MyQueuePolicy\n        Statement:\n        - Sid: Allow-SNS-SendMessage\n          Effect: Allow\n          Principal: \"*\"\n          Action:\n          - sqs:SendMessage\n          Resource: !GetAtt ReceivedOrder.Arn\n          Condition:\n           ArnEquals:\n            aws:SourceArn: !Ref SNSTopicARN\n       Queues:\n        - !Ref ReceivedOrder\n    SqsQueueCompletedPolicy:\n      Type: AWS::SQS::QueuePolicy\n      Properties:\n       PolicyDocument:\n        Version: '2012-10-17'\n        Id: MyQueuePolicy\n        Statement:\n        - Sid: Allow-SNS-SendMessage\n          Effect: Allow\n          Principal: \"*\"\n          Action:\n          - sqs:SendMessage\n          Resource: !GetAtt CompletedOrder.Arn\n          Condition:\n           ArnEquals:\n            aws:SourceArn: !Ref SNSTopicARN\n       Queues:\n        - !Ref CompletedOrder\n    SqsQueueCanceledPolicy:\n      Type: AWS::SQS::QueuePolicy\n      Properties:\n       PolicyDocument:\n        Version: '2012-10-17'\n        Id: MyQueuePolicy\n        Statement:\n        - Sid: Allow-SNS-SendMessage\n          Effect: Allow\n          Principal: \"*\"\n          Action:\n          - sqs:SendMessage\n          Resource: !GetAtt CanceledOrder.Arn\n          Condition:\n           ArnEquals:\n            aws:SourceArn: !Ref SNSTopicARN\n       Queues:\n        - !Ref CanceledOrder\n    MessagesOrder:\n      Type: AWS::SNS::Topic\n      Properties:\n        TopicName: messages-order\n    SnsSubscriptionProcessed:\n      Type: AWS::SNS::Subscription\n      Properties:\n       Protocol: sqs\n       Endpoint: !GetAtt ProcessedOrder.Arn\n       Region: !Ref TopicRegion\n       TopicArn: !GetAtt MessagesOrder.Arn\n       FilterPolicyScope: MessageAttributes\n       FilterPolicy:\n        estado:\n          - EN_PROCESO\n      DependsOn: MessagesOrder\n    SnsSubscriptionReceived:\n      Type: AWS::SNS::Subscription\n      Properties:\n       Protocol: sqs\n       Endpoint: !GetAtt ReceivedOrder.Arn\n       Region: !Ref TopicRegion\n       TopicArn: !Ref SNSTopicARN\n       FilterPolicyScope: MessageAttributes\n       FilterPolicy:\n        estado:\n          - RECIBIDA\n    SnsSubscriptionCompleted:\n      Type: AWS::SNS::Subscription\n      Properties:\n       Protocol: sqs\n       Endpoint: !GetAtt CompletedOrder.Arn\n       Region: !Ref TopicRegion\n       TopicArn: !Ref SNSTopicARN\n       FilterPolicyScope: MessageAttributes\n       FilterPolicy:\n        estado:\n          - COMPLETADA\n    SnsSubscriptionCanceled:\n      Type: AWS::SNS::Subscription\n      Properties:\n       Protocol: sqs\n       Endpoint: !GetAtt CanceledOrder.Arn\n       Region: !Ref TopicRegion\n       TopicArn: !Ref SNSTopicARN\n       FilterPolicyScope: MessageAttributes\n       FilterPolicy:\n        estado:\n          - CANCELADA\n\n",
    "command": [
      "deploy"
    ],
    "options": {},
    "orgId": "a801b01f-732e-4c73-9731-5dccefd1c739",
    "orgName": "nicolasenterprise",
    "userId": "cH4RH1BQlWT1lnR4jC",
    "userName": "nicolasenterprise",
    "serviceProviderAwsAccountId": "605134431763",
    "serviceProviderAwsCfStackName": "work-order-backend-dev",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-east-1:605134431763:stack/work-order-backend-dev/e28f1240-ebe5-11ef-a513-0e55ac7fee47",
    "serviceProviderAwsCfStackCreated": "2025-02-15T21:43:25.403Z",
    "serviceProviderAwsCfStackUpdated": "2025-02-18T00:36:02.833Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_ROLLBACK_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "RequestDashlambdaLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:605134431763:function:work-order-backend-dev-request-lambda:17",
        "Description": "Current Lambda function version",
        "ExportName": "sls-work-order-backend-dev-RequestDashlambdaLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ProccessingDashordersDashlambdaLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:605134431763:function:work-order-backend-dev-proccessing-orders-lambda:3",
        "Description": "Current Lambda function version",
        "ExportName": "sls-work-order-backend-dev-ProccessingDashordersDashlambdaLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://curpwfamjl.execute-api.us-east-1.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-work-order-backend-dev-ServiceEndpoint"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-us-east-1-ef14dd6c-d74f",
        "ExportName": "sls-work-order-backend-dev-ServerlessDeploymentBucketName"
      }
    ]
  }
}