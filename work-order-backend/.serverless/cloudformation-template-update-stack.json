{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "RequestDashlambdaLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/work-order-backend-dev-request-lambda"
      }
    },
    "ProccessingDashordersDashlambdaLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/work-order-backend-dev-proccessing-orders-lambda"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "work-order-backend",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/work-order-backend-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/work-order-backend-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "UsersTable",
                        "Arn"
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sns:Publish"
                  ],
                  "Resource": [
                    {
                      "Ref": "SNSTopicARN"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "ProcessedOrder",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "ReceivedOrder",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "CompletedOrder",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "CanceledOrder",
                        "Arn"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "work-order-backend",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "RequestDashlambdaLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-ef14dd6c-d74f",
          "S3Key": "serverless/work-order-backend/dev/1739839043205-2025-02-18T00:37:23.205Z/work-order-backend.zip"
        },
        "Handler": "app.handler",
        "Runtime": "python3.10",
        "FunctionName": "work-order-backend-dev-request-lambda",
        "MemorySize": 1024,
        "Timeout": 35,
        "Description": "Lambda que recibe las ordenes de trabajo",
        "Environment": {
          "Variables": {
            "USERS_TABLE": "orders-table-dev",
            "SNS_TOPIC": "arn:aws:sns:us-east-1:605134431763:messages-order"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "RequestDashlambdaLogGroup"
      ]
    },
    "ProccessingDashordersDashlambdaLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-ef14dd6c-d74f",
          "S3Key": "serverless/work-order-backend/dev/1739839043205-2025-02-18T00:37:23.205Z/work-order-backend.zip"
        },
        "Handler": "processing-lam.handler",
        "Runtime": "python3.10",
        "FunctionName": "work-order-backend-dev-proccessing-orders-lambda",
        "MemorySize": 1024,
        "Timeout": 10,
        "Description": "Lambda que procesa las ordenes de trabajo que se encuentran en cola",
        "Environment": {
          "Variables": {
            "USERS_TABLE": "orders-table-dev",
            "SNS_TOPIC": "arn:aws:sns:us-east-1:605134431763:messages-order"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ProccessingDashordersDashlambdaLogGroup"
      ]
    },
    "RequestDashlambdaLambdaVersionykIbI5CKg9RCkDlOnKCmOloARnakwC4nJyUPUSbrUeA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "RequestDashlambdaLambdaFunction"
        },
        "CodeSha256": "yZAab4sghrYdBjCLsNro6AM0Kr8tZ/ZeGZmvYsz/A9s=",
        "Description": "Lambda que recibe las ordenes de trabajo"
      }
    },
    "ProccessingDashordersDashlambdaLambdaVersionZLCW9PIIIOCkFhesESHHEevyYMZYVDcSy6XkijARFRs": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ProccessingDashordersDashlambdaLambdaFunction"
        },
        "CodeSha256": "yZAab4sghrYdBjCLsNro6AM0Kr8tZ/ZeGZmvYsz/A9s=",
        "Description": "Lambda que procesa las ordenes de trabajo que se encuentran en cola"
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-work-order-backend",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceProxyVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "{proxy+}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAny": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "ANY",
        "RequestParameters": {},
        "ResourceId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "RequestDashlambdaLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "RequestDashlambdaLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodProxyVarAny": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "ANY",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceProxyVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "RequestDashlambdaLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "RequestDashlambdaLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayDeployment1739839029652": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodAny",
        "ApiGatewayMethodProxyVarAny"
      ]
    },
    "RequestDashlambdaLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "RequestDashlambdaLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ProccessingDashordersDashlambdaEventSourceMappingSQSProcessedOrder": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 10,
        "MaximumBatchingWindowInSeconds": 60,
        "EventSourceArn": {
          "Fn::GetAtt": [
            "ProcessedOrder",
            "Arn"
          ]
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "ProccessingDashordersDashlambdaLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": true
      }
    },
    "ProccessingDashordersDashlambdaEventSourceMappingSQSReceivedOrder": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 10,
        "MaximumBatchingWindowInSeconds": 60,
        "EventSourceArn": {
          "Fn::GetAtt": [
            "ReceivedOrder",
            "Arn"
          ]
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "ProccessingDashordersDashlambdaLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": true
      }
    },
    "ProccessingDashordersDashlambdaEventSourceMappingSQSCompletedOrder": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 10,
        "MaximumBatchingWindowInSeconds": 60,
        "EventSourceArn": {
          "Fn::GetAtt": [
            "CompletedOrder",
            "Arn"
          ]
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "ProccessingDashordersDashlambdaLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": true
      }
    },
    "ProccessingDashordersDashlambdaEventSourceMappingSQSCanceledOrder": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 10,
        "MaximumBatchingWindowInSeconds": 60,
        "EventSourceArn": {
          "Fn::GetAtt": [
            "CanceledOrder",
            "Arn"
          ]
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "ProccessingDashordersDashlambdaLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": true
      }
    },
    "UsersTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 1,
          "WriteCapacityUnits": 1
        },
        "TableName": "orders-table-dev"
      }
    },
    "ProcessedOrder": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": "processed-order-queue"
      }
    },
    "ReceivedOrder": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": "received-order-queue"
      }
    },
    "CompletedOrder": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": "completed-order-queue"
      }
    },
    "CanceledOrder": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": "canceled-order-queue"
      }
    },
    "SqsQueueProcessedPolicy": {
      "Type": "AWS::SQS::QueuePolicy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Id": "MyQueuePolicy",
          "Statement": [
            {
              "Sid": "Allow-SNS-SendMessage",
              "Effect": "Allow",
              "Principal": "*",
              "Action": [
                "sqs:SendMessage"
              ],
              "Resource": {
                "Fn::GetAtt": [
                  "ProcessedOrder",
                  "Arn"
                ]
              },
              "Condition": {
                "ArnEquals": {
                  "aws:SourceArn": {
                    "Ref": "SNSTopicARN"
                  }
                }
              }
            }
          ]
        },
        "Queues": [
          {
            "Ref": "ProcessedOrder"
          }
        ]
      }
    },
    "SqsQueueReceivedPolicy": {
      "Type": "AWS::SQS::QueuePolicy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Id": "MyQueuePolicy",
          "Statement": [
            {
              "Sid": "Allow-SNS-SendMessage",
              "Effect": "Allow",
              "Principal": "*",
              "Action": [
                "sqs:SendMessage"
              ],
              "Resource": {
                "Fn::GetAtt": [
                  "ReceivedOrder",
                  "Arn"
                ]
              },
              "Condition": {
                "ArnEquals": {
                  "aws:SourceArn": {
                    "Ref": "SNSTopicARN"
                  }
                }
              }
            }
          ]
        },
        "Queues": [
          {
            "Ref": "ReceivedOrder"
          }
        ]
      }
    },
    "SqsQueueCompletedPolicy": {
      "Type": "AWS::SQS::QueuePolicy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Id": "MyQueuePolicy",
          "Statement": [
            {
              "Sid": "Allow-SNS-SendMessage",
              "Effect": "Allow",
              "Principal": "*",
              "Action": [
                "sqs:SendMessage"
              ],
              "Resource": {
                "Fn::GetAtt": [
                  "CompletedOrder",
                  "Arn"
                ]
              },
              "Condition": {
                "ArnEquals": {
                  "aws:SourceArn": {
                    "Ref": "SNSTopicARN"
                  }
                }
              }
            }
          ]
        },
        "Queues": [
          {
            "Ref": "CompletedOrder"
          }
        ]
      }
    },
    "SqsQueueCanceledPolicy": {
      "Type": "AWS::SQS::QueuePolicy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Id": "MyQueuePolicy",
          "Statement": [
            {
              "Sid": "Allow-SNS-SendMessage",
              "Effect": "Allow",
              "Principal": "*",
              "Action": [
                "sqs:SendMessage"
              ],
              "Resource": {
                "Fn::GetAtt": [
                  "CanceledOrder",
                  "Arn"
                ]
              },
              "Condition": {
                "ArnEquals": {
                  "aws:SourceArn": {
                    "Ref": "SNSTopicARN"
                  }
                }
              }
            }
          ]
        },
        "Queues": [
          {
            "Ref": "CanceledOrder"
          }
        ]
      }
    },
    "MessagesOrder": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "TopicName": "messages-order"
      }
    },
    "SnsSubscriptionProcessed": {
      "Type": "AWS::SNS::Subscription",
      "Properties": {
        "Protocol": "sqs",
        "Endpoint": {
          "Fn::GetAtt": [
            "ProcessedOrder",
            "Arn"
          ]
        },
        "Region": {
          "Ref": "TopicRegion"
        },
        "TopicArn": {
          "Fn::GetAtt": [
            "MessagesOrder",
            "Arn"
          ]
        },
        "FilterPolicyScope": "MessageAttributes",
        "FilterPolicy": {
          "estado": [
            "EN_PROCESO"
          ]
        }
      },
      "DependsOn": [
        "MessagesOrder"
      ]
    },
    "SnsSubscriptionReceived": {
      "Type": "AWS::SNS::Subscription",
      "Properties": {
        "Protocol": "sqs",
        "Endpoint": {
          "Fn::GetAtt": [
            "ReceivedOrder",
            "Arn"
          ]
        },
        "Region": {
          "Ref": "TopicRegion"
        },
        "TopicArn": {
          "Ref": "SNSTopicARN"
        },
        "FilterPolicyScope": "MessageAttributes",
        "FilterPolicy": {
          "estado": [
            "RECIBIDA"
          ]
        }
      }
    },
    "SnsSubscriptionCompleted": {
      "Type": "AWS::SNS::Subscription",
      "Properties": {
        "Protocol": "sqs",
        "Endpoint": {
          "Fn::GetAtt": [
            "CompletedOrder",
            "Arn"
          ]
        },
        "Region": {
          "Ref": "TopicRegion"
        },
        "TopicArn": {
          "Ref": "SNSTopicARN"
        },
        "FilterPolicyScope": "MessageAttributes",
        "FilterPolicy": {
          "estado": [
            "COMPLETADA"
          ]
        }
      }
    },
    "SnsSubscriptionCanceled": {
      "Type": "AWS::SNS::Subscription",
      "Properties": {
        "Protocol": "sqs",
        "Endpoint": {
          "Fn::GetAtt": [
            "CanceledOrder",
            "Arn"
          ]
        },
        "Region": {
          "Ref": "TopicRegion"
        },
        "TopicArn": {
          "Ref": "SNSTopicARN"
        },
        "FilterPolicyScope": "MessageAttributes",
        "FilterPolicy": {
          "estado": [
            "CANCELADA"
          ]
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": "serverless-framework-deployments-us-east-1-ef14dd6c-d74f",
      "Export": {
        "Name": "sls-work-order-backend-dev-ServerlessDeploymentBucketName"
      }
    },
    "RequestDashlambdaLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "RequestDashlambdaLambdaVersionykIbI5CKg9RCkDlOnKCmOloARnakwC4nJyUPUSbrUeA"
      },
      "Export": {
        "Name": "sls-work-order-backend-dev-RequestDashlambdaLambdaFunctionQualifiedArn"
      }
    },
    "ProccessingDashordersDashlambdaLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ProccessingDashordersDashlambdaLambdaVersionZLCW9PIIIOCkFhesESHHEevyYMZYVDcSy6XkijARFRs"
      },
      "Export": {
        "Name": "sls-work-order-backend-dev-ProccessingDashordersDashlambdaLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      },
      "Export": {
        "Name": "sls-work-order-backend-dev-ServiceEndpoint"
      }
    }
  },
  "Parameters": {
    "SNSTopicARN": {
      "Type": "String",
      "Default": "arn:aws:sns:us-east-1:605134431763:messages-order"
    },
    "TopicRegion": {
      "Type": "String",
      "Default": "us-east-1"
    }
  }
}