import os
import uuid
import boto3
from flask import Flask, jsonify, make_response, request
import awsgi

app = Flask(__name__)


dynamodb_client = boto3.client('dynamodb', region_name='us-east-1')

if os.environ.get('IS_OFFLINE'):
    dynamodb_client = boto3.client(
        'dynamodb', region_name='localhost', endpoint_url='http://localhost:8000'
    )


USERS_TABLE = os.environ['USERS_TABLE']

'''
@app.route('/users/<string:user_id>')
def get_user(user_id):
    result = dynamodb_client.get_item(
        TableName=USERS_TABLE, Key={'userId': {'S': user_id}}
    )
    item = result.get('Item')
    if not item:
        return jsonify({'error': 'Could not find user with provided "userId"'}), 404

    return jsonify(
        {'userId': item.get('userId').get('S'), 'name': item.get('name').get('S')}
    )

'''

@app.route('/v1/order', methods=['POST'])
def create_order():
    try:
        date_register = request.json.get('fecha_registro')
        description = request.json.get('description')
        date_delivery = request.json.get('fecha_entrega')
        status = request.json.get('estado')
        if not description or not date_register:
            return make_response(jsonify(error='Please provide both "description" and "date_register"'), 400)
        id = uuid.uuid1()
    
    except Exception as e:
        print(e)
        return make_response(jsonify({'error': 'Could not create order'}), 500)

    return make_response(jsonify({'id': id}),200)


@app.errorhandler(404)
def resource_not_found(e):
    return make_response(jsonify(error='Not found!'), 404)

def handler(event, context):
    print(event)
    return awsgi.response(app, event, context)